plugins {
    id 'io.spring.dependency-management'
    id 'org.springframework.boot'
    id 'com.google.cloud.tools.jib'
    id 'com.google.protobuf'
    id 'java'
}

dependencies {
//    implementation 'org.springframework.boot:spring-boot-starter-web'
//    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
    implementation 'org.springframework.cloud:spring-cloud-starter-kubernetes-client-all'
    implementation 'org.springframework.cloud:spring-cloud-starter-kubernetes-client-loadbalancer'
    implementation "com.google.protobuf:protobuf-java:$protobufVersion"
    implementation "io.grpc:grpc-netty-shaded"
    implementation "io.grpc:grpc-protobuf"
    implementation "io.grpc:grpc-stub"
}

dependencyManagement {
    imports {
        // SpringCloud BOM/platform dependency. This is the only place you set version of SpringCloud
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
        // Kubernetes BOM/platform dependency. This is the only place you set version of Kubernetes
        mavenBom "org.springframework.cloud:spring-cloud-kubernetes-dependencies:$kubernetesVersion"
        // gRPC BOM/platform dependency. This is the only place you set version of gRPC
        mavenBom "io.grpc:grpc-bom:$grpcVersion"
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:$protobufVersion"
    }
    generatedFilesBaseDir = "$projectDir/build/generated"
    clean {
        delete generatedFilesBaseDir
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

jib {
    from {
        image = "${baseImage}"
    }
    to {
        image = "${registryName}/${project.name}:${version}"
        auth {
            username = "${registryUser}" // Defined in 'gradle.properties'.
            password = "${registryPassword}"
        }
    }
    container {
        labels.putAll(
                "maintainer": "$maintainer",
                "org.opencontainers.image.title": "$project.name",
                "org.opencontainers.image.version": "$version",
                "org.opencontainers.image.source": "$gitSource"
        )
        creationTime = "USE_CURRENT_TIMESTAMP"
        jvmFlags = ['-server', '-Xtune:virtualized', '-XX:+UseContainerSupport', '-XX:MaxRAMPercentage=80', '-Djava.security.egd=file:/dev/./urandom']
    }
}

// Optional
idea {
    module {
        sourceDirs += file("build/generated/main/java")
        sourceDirs += file("build/generated/main/grpc")
        generatedSourceDirs += file("build/generated/main/java")
        generatedSourceDirs += file("build/generated/main/grpc")
    }
}